####################################################################################################
#####                              TX Ultimate Easy for ESPHome                                #####
#####                  Repository: https://github.com/edwardtfn/TX-Ultimate-Easy               #####
####################################################################################################
##### Purpose: ESPHome - Standard - Hardware - Vibration system                                #####
####################################################################################################
##### Author: edwardtfn - https://github.com/edwardtfn - https://buymeacoffee.com/edwardfirmo  #####
####################################################################################################
##### NOTE:                                                                                    #####
##### - Make changes ONLY if absolutely necessary and you have the required knowledge.         #####
##### - For normal system use, modifications to this file are NOT required.                    #####
####################################################################################################
---
substitutions:
  vibration_max_duration: 2s

  TAG_STD_HW_VIBRATION: std.hw.vibration

globals:
  - id: touch_vibration_press_active
    type: bool
    restore_value: no
    initial_value: 'false'

binary_sensor:
  - id: bs_vibrating
    name: Vibrating
    icon: mdi:vibrate
    internal: false
    platform: template
    lambda: return sw_vibration_motor->state;

button:
  - id: bt_vibrate
    name: Vibrate
    icon: mdi:vibrate
    internal: false
    platform: template
    on_press:
      then:
        - script.execute: vibrate

esphome:
  platformio_options:
    build_flags:
      - -D TX_ULTIMATE_EASY_STANDARD_HW_VIBRATION

number:
  - id: nr_vibrating_duration
    name: Vibrate duration
    icon: mdi:vibrate
    unit_of_measurement: ms
    internal: false
    entity_category: config
    platform: template
    min_value: 1
    max_value: 500
    step: 1
    initial_value: 15
    optimistic: true
    restore_value: true

ota:
  on_state_change:
    then:
      - switch.turn_off: sw_vibration_motor

script:
  - id: !extend dump_config
    then:
      - lambda: |-
          // Configuration
          ESP_LOGCONFIG("${TAG_STD_HW_VIBRATION}", "Touch - Vibration feedback: %s",
                        sl_touch_vibration_feedback->state.c_str());
          ESP_LOGCONFIG("${TAG_STD_HW_VIBRATION}", "Vibrate duration: %.0fms", nr_vibrating_duration->state);
          ESP_LOGCONFIG("${TAG_STD_HW_VIBRATION}", "Vibrate max duration: ${vibration_max_duration}");

          // State
          if (bs_vibrating->state)
            ESP_LOGW("${TAG_STD_HW_VIBRATION}", "Vibrating now: YES");
          else
            ESP_LOGCONFIG("${TAG_STD_HW_VIBRATION}", "Vibrating now: No");

  - id: !extend dump_config_list_packages
    then:
      - script.wait: dump_config
      - lambda: |-
          // Check for requirements
          #if !defined(TX_ULTIMATE_EASY_CORE_COMMON)
            #error "The package TX-Ultimate-Easy-ESPHome_core_common.yaml is required."
          #endif

          // Identify itself
          ESP_LOGCONFIG(ESPHOME_PROJECT_NAME, "  - Standard - Hardware - Vibration");

  - id: !extend touch_on_multi_touch_release
    then:
      - script.execute: touch_on_multi_touch_release_vibration

  - id: touch_on_multi_touch_release_vibration
    mode: restart
    then:
      - lambda: |-
          const auto &mode = sl_touch_vibration_feedback->state;
          if (mode == "On press" || mode == "Always") {
            id(touch_vibration_press_active) = false;
            if (id(sw_vibration_motor).state)
              id(sw_vibration_motor).turn_off();
          }
          if (mode == "On release" || mode == "Always")
            id(vibrate).execute();

  - id: !extend touch_on_press
    then:
      - script.execute: touch_on_press_vibration

  - id: touch_on_press_vibration
    mode: restart
    then:
      - lambda: |-
          const auto &mode = sl_touch_vibration_feedback->state;
          if (mode == "On press" || mode == "Always") {
            id(touch_vibration_press_active) = true;
            id(touch_vibration_press_pattern).execute();
          }

  - id: !extend touch_on_release
    then:
      - script.execute: touch_on_release_vibration

  - id: touch_on_release_vibration
    mode: restart
    then:
      - lambda: |-
          const auto &mode = sl_touch_vibration_feedback->state;
          if (mode == "On press" || mode == "Always") {
            id(touch_vibration_press_active) = false;
            if (id(sw_vibration_motor).state)
              id(sw_vibration_motor).turn_off();
            id(touch_vibration_press_pattern).stop();
          }
          if (mode == "On release" || mode == "Always")
            id(vibrate).execute();

  - id: touch_vibration_press_pattern
    mode: restart
    then:
      - while:
          condition:
            lambda: return id(touch_vibration_press_active);
          then:
            - switch.turn_on: sw_vibration_motor
            - delay: 10ms
            - switch.turn_off: sw_vibration_motor
            - delay: 10ms
      - switch.turn_off: sw_vibration_motor

  - id: vibrate
    mode: restart
    then:
      - switch.turn_on: sw_vibration_motor
      - delay: !lambda return nr_vibrating_duration->state;
      - switch.turn_off: sw_vibration_motor

select:
  - id: sl_touch_vibration_feedback
    name: Touch - Vibration feedback
    platform: template
    options:
      - "Disabled"
      - "On press"
      - "On release"
      - "Always"
    initial_option: "Disabled"
    optimistic: true
    restore_value: true
    internal: false
    entity_category: config
    disabled_by_default: false
    icon: mdi:vibrate

switch:
  - id: sw_vibration_motor
    name: Vibration motor
    platform: gpio
    pin: GPIO21
    restore_mode: ALWAYS_OFF
    internal: true
    on_state:
      then:
        - binary_sensor.template.publish:
            id: bs_vibrating
            state: !lambda return x;
    on_turn_on:
      then:
        - if:
            condition:
              lambda: return !id(touch_vibration_press_active);
            then:
              - delay: ${vibration_max_duration}
              - if:
                  condition:
                    switch.is_on: sw_vibration_motor
                  then:
                    - switch.turn_off: sw_vibration_motor
...
